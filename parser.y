%{

#include<stdio.h>
#include<stdlib.h>
#include<string.h>



extern FILE *yyin;
extern int yylex();
extern int yylineno;
extern void yyerror();

%}




		

%token T_IDENTIFIER		

%token T_ICONST						
%token T_SCONST			

%token T_INTEGER   		
%token T_CHAR 			
%token T_STRING 		

%token T_IF        		
%token T_THEN      		
%token T_ELSE      		
%token T_ELSEIF    		
%token T_ENDIF			
%token T_FOR       		
%token T_TO        		
%token T_STEP      		
%token T_ENDFOR    		
%token T_WHILE     		
%token T_ENDWHILE  		
%token T_SWITCH    		
%token T_CASE      		
%token T_DEFAULT   		
%token T_ENDSWITCH 		

%token T_PROGRAM   		
%token T_FUNCTION  		
%token T_VARS      		
%token T_END_FUNCTION 	
%token T_RETURN    		
%token T_STARTMAIN 		
%token T_ENDMAIN  		

%token T_BREAK     		
%token T_PRINT     	

%token T_ANDOP 			
%token T_OROP			
%token T_ADDOP		
	
%token T_MULOP			
%token T_POWOP			
%token T_FOROP			
%token T_EQUOP			
%token T_ASS			
%token T_COMPOP			

%token T_COMM      		

%token T_SEMIC			
%token T_COLON			
%token T_BRA_OPEN		
%token T_BRA_CLOSE 		
%token T_AGG_OPEN		
%token T_AGG_CLOSE 		
%token T_COMMA
%token T_DOT

%token T_TYPEDEF
%token T_STRUCT        
%token T_ENDSTRUCT     

%token T_MLCOMM   

%token T_NEWLINE

%left T_COMMA
%right T_ASS 
%left T_OROP
%left T_ANDOP
%left T_EQUOP
%left T_COMPOP
%left T_ADDOP
%left T_MULOP 
%left T_BRA_OPEN T_BRA_CLOSE


%start PROGRAM

%%


							
PROGRAM:	T_PROGRAM T_IDENTIFIER NEWLINES MAIN 
		| T_PROGRAM T_IDENTIFIER NEWLINES FUNCTIONS MAIN
		| T_PROGRAM T_IDENTIFIER NEWLINES STRUCT_DECLARATIONS FUNCTIONS MAIN
		| T_PROGRAM T_IDENTIFIER NEWLINES STRUCT_DECLARATIONS MAIN;

FUNCTION: T_FUNCTION FUNCTION_CALL NEWLINES FUNCTION_BODY NEWLINES T_END_FUNCTION NEWLINES;

FUNCTIONS: FUNCTION | FUNCTION FUNCTIONS;


FUNCTION_CALL: T_IDENTIFIER  T_BRA_OPEN  VARIABLES_OR_NOT T_BRA_CLOSE ;
FUNCTION_BODY: VARS NEWLINES BLOCKS RETURN | BLOCKS RETURN; 


VARS:T_VARS T_AGG_OPEN NEWLINES MULTILINE_FUNCTION_VARS T_AGG_CLOSE;
VAR_TYPE: T_INTEGER | T_CHAR | T_STRING | STRUCTCALL | STRUCTDEFCALL;
VAR_ARRAY: T_IDENTIFIER | T_IDENTIFIER PINAKAS;
COMMA_STRING: VAR_ARRAY| VAR_ARRAY T_COMMA COMMA_STRING;
FUNCTION_VARS: VAR_TYPE COMMA_STRING T_SEMIC NEWLINES; 
MULTILINE_FUNCTION_VARS: FUNCTION_VARS| FUNCTION_VARS MULTILINE_FUNCTION_VARS;

PINAKAS: T_AGG_OPEN T_ICONST T_AGG_CLOSE;


STRUCT_DECLARATION:T_STRUCT T_IDENTIFIER NEWLINES VARS NEWLINES T_ENDSTRUCT NEWLINES;
		   
STRUCT_TYPEDEF_DECLARATION: T_TYPEDEF T_STRUCT T_IDENTIFIER NEWLINES VARS NEWLINES 				     T_IDENTIFIER T_ENDSTRUCT NEWLINES;
		   
STRUCT_DECLARATIONS:	 STRUCT_DECLARATION 
			|STRUCT_DECLARATION STRUCT_DECLARATIONS
			
			|STRUCT_TYPEDEF_DECLARATION
			|STRUCT_TYPEDEF_DECLARATION STRUCT_DECLARATIONS;


STRUCTCALL:		T_STRUCT T_IDENTIFIER;
			
STRUCTDEFCALL:		T_IDENTIFIER;
			

		
			

RETURN: T_RETURN T_IDENTIFIER T_SEMIC
	|T_RETURN T_ICONST T_SEMIC
	|T_RETURN T_SCONST T_SEMIC;		
												
NEWLINES:  T_NEWLINE | T_NEWLINE NEWLINES;

VARIABLE:		T_IDENTIFIER;
VARIABLES: 		VARIABLE | VARIABLE T_COMMA VARIABLES; 
VARIABLES_OR_NOT:	%empty | VARIABLES; 





OPERATOR: 	  T_ADDOP|T_MULOP|T_POWOP;

OPERATIONS:	OPERATION
		| OPERATION OPERATOR T_ICONST 
		| OPERATION OPERATOR T_IDENTIFIER 
		| OPERATION OPERATOR OPERATIONS
		| OPERATION OPERATOR T_IDENTIFIER T_DOT T_IDENTIFIER
		| T_BRA_OPEN OPERATIONS T_BRA_CLOSE;
		

OPERATION:       T_ICONST OPERATOR T_ICONST 
		| T_IDENTIFIER OPERATOR T_IDENTIFIER 
		| T_IDENTIFIER OPERATOR T_ICONST
		| T_ICONST OPERATOR T_IDENTIFIER 
		| T_SCONST OPERATOR T_IDENTIFIER T_DOT T_IDENTIFIER 
		| T_IDENTIFIER T_DOT T_IDENTIFIER OPERATOR T_IDENTIFIER 
		| T_IDENTIFIER T_DOT T_IDENTIFIER OPERATOR T_ICONST
		| T_IDENTIFIER T_DOT T_IDENTIFIER OPERATOR T_SCONST
		| T_ICONST OPERATOR T_IDENTIFIER T_DOT T_IDENTIFIER
		| T_IDENTIFIER T_DOT T_IDENTIFIER OPERATOR T_IDENTIFIER T_DOT 		  T_IDENTIFIER;
		
	
		

	
LOGICAL_OPERATOR: T_ANDOP|T_OROP|T_COMPOP;
		
COMPR_EXPRESSION:	T_IDENTIFIER T_COMPOP T_IDENTIFIER 
			| T_IDENTIFIER T_COMPOP T_ICONST 
			| T_IDENTIFIER T_COMPOP T_IDENTIFIER T_DOT T_IDENTIFIER 
			| T_IDENTIFIER T_COMPOP T_SCONST 
			| T_ICONST T_COMPOP T_ICONST 
			| T_ICONST T_COMPOP T_IDENTIFIER T_DOT T_IDENTIFIER
			| T_SCONST T_COMPOP T_SCONST
			| T_SCONST T_COMPOP T_IDENTIFIER T_DOT T_IDENTIFIER
			| T_IDENTIFIER T_DOT T_IDENTIFIER T_COMPOP T_IDENTIFIER 
			| T_IDENTIFIER T_DOT T_IDENTIFIER T_COMPOP T_ICONST 
			| T_IDENTIFIER T_DOT T_IDENTIFIER T_COMPOP T_SCONST 
			| T_IDENTIFIER T_DOT T_IDENTIFIER T_COMPOP 				  T_IDENTIFIER T_DOT T_IDENTIFIER ;
			
	
					
LOGICAL_EXPRESSION:	

T_BRA_OPEN COMPR_EXPRESSION LOGICAL_OPERATOR COMPR_EXPRESSION T_BRA_CLOSE     

| T_BRA_OPEN COMPR_EXPRESSION LOGICAL_OPERATOR LOGICAL_EXPRESSION T_BRA_CLOSE 
			
| T_BRA_OPEN LOGICAL_EXPRESSION LOGICAL_OPERATOR LOGICAL_EXPRESSION T_BRA_CLOSE
			
| T_BRA_OPEN COMPR_EXPRESSION T_BRA_CLOSE;
								
		
	
	
		
BLOCK: 	FUNCTION_CALL T_SEMIC
		|ASSIGNMENT
		|BREAK
		|IFSTATEMENT
		|WHILELOOP
		|FORLOOP
		|SWITCHES
		|PRINT;
			
		



BLOCKS: 	BLOCK NEWLINES| BLOCKS BLOCK NEWLINES ;




ASSIGNMENT:	T_IDENTIFIER T_ASS T_ICONST T_SEMIC
		| T_IDENTIFIER PINAKAS T_ASS T_ICONST T_SEMIC 		
		| T_IDENTIFIER  T_ASS T_SCONST T_SEMIC 	
		| T_IDENTIFIER PINAKAS T_ASS T_SCONST T_SEMIC 	
		| T_IDENTIFIER T_ASS T_IDENTIFIER T_SEMIC	
		| T_IDENTIFIER PINAKAS T_ASS T_IDENTIFIER T_SEMIC
		| T_IDENTIFIER T_ASS OPERATIONS T_SEMIC 
		| T_IDENTIFIER PINAKAS T_ASS OPERATIONS T_SEMIC
		| T_IDENTIFIER T_ASS FUNCTION_CALL T_SEMIC
		| T_IDENTIFIER PINAKAS T_ASS FUNCTION_CALL T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER T_ASS T_ICONST T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS T_ICONST T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER T_ASS OPERATIONS T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS OPERATIONS T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER T_ASS FUNCTION_CALL T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS FUNCTION_CALL T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER T_ASS T_SCONST T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS T_SCONST T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER T_ASS T_IDENTIFIER T_SEMIC
		| T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS T_IDENTIFIER T_SEMIC
		| T_IDENTIFIER T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER T_SEMIC
		| T_IDENTIFIER PINAKAS T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER T_SEMIC
		| T_IDENTIFIER T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_SEMIC
|T_IDENTIFIER T_DOT T_IDENTIFIER T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER T_SEMIC
|T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER T_SEMIC
|T_IDENTIFIER T_DOT T_IDENTIFIER  T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_SEMIC
|T_IDENTIFIER T_DOT T_IDENTIFIER PINAKAS T_ASS T_IDENTIFIER T_DOT T_IDENTIFIER  PINAKAS T_SEMIC;
		
		
		

IFSTATEMENT:	
	T_IF LOGICAL_EXPRESSION NEWLINES T_THEN NEWLINES BLOCKS T_ENDIF
	
	|T_IF LOGICAL_EXPRESSION NEWLINES T_THEN NEWLINES BLOCKS ELSEIF  		T_ELSE NEWLINES BLOCKS T_ENDIF 
	
	|T_IF LOGICAL_EXPRESSION NEWLINES T_THEN NEWLINES BLOCKS T_ELSE 		 NEWLINES BLOCKS T_ENDIF ;
	
ELSEIF:  T_ELSEIF LOGICAL_EXPRESSION NEWLINES BLOCKS
	 |T_ELSEIF LOGICAL_EXPRESSION NEWLINES BLOCKS ELSEIF; 
							

							
							
								
		
		
			

WHILELOOP:	T_WHILE LOGICAL_EXPRESSION NEWLINES BLOCKS T_ENDWHILE;
							
				
	
						
FORLOOP:  	T_FOR T_IDENTIFIER T_FOROP T_ICONST T_TO T_ICONST T_STEP T_ICONST 			NEWLINES BLOCKS T_ENDFOR;





SWITCHES: 	T_SWITCH T_BRA_OPEN T_IDENTIFIER T_BRA_CLOSE NEWLINES CASES 			 T_DEFAULT NEWLINES BLOCKS T_ENDSWITCH 
		| T_SWITCH T_BRA_OPEN T_IDENTIFIER T_BRA_CLOSE NEWLINES CASES 		 T_ENDSWITCH;
		
											
CASE:		T_CASE T_BRA_OPEN T_ICONST T_BRA_CLOSE NEWLINES BLOCKS 
		|T_CASE T_BRA_OPEN T_IDENTIFIER T_BRA_CLOSE NEWLINES BLOCKS 
		| T_CASE T_BRA_OPEN T_SCONST T_BRA_CLOSE NEWLINES BLOCKS 
		| T_CASE T_BRA_OPEN OPERATOR T_BRA_CLOSE NEWLINES BLOCKS
		| T_CASE T_BRA_OPEN COMPR_EXPRESSION T_BRA_CLOSE NEWLINES BLOCKS;
							

CASES:      	CASE  | CASES CASE;



PRINT:   	T_PRINT T_BRA_OPEN T_SCONST T_BRA_CLOSE 
		|T_PRINT T_BRA_OPEN T_SCONST T_COMMA T_AGG_OPEN T_IDENTIFIER
		T_AGG_CLOSE T_BRA_CLOSE;



BREAK:		T_BREAK T_SEMIC;



MAIN: 		T_STARTMAIN NEWLINES MAINBODY T_ENDMAIN NEWLINES;

MAINBODY:	BLOCKS | VARS NEWLINES BLOCKS; 









%%


int main(int argc, char *argv[]){
	
	int token;
	
	if(argc > 1){
		yyin = fopen(argv[1], "r");
		if(yyin == NULL){
			perror("Error opening file.");
			return -1;
		}	
	}
	
	yyparse();
	printf("Compile end!\n");
	
	fclose(yyin);
	
}

void yyerror(const char* err){
	printf("Error in line %d:\t %s \n", yylineno, err);
}






